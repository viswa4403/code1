mport 'dart:io';
import 'main.dart';
import 'package:flutter/material.dart';
import 'package:flutter_audio_query/flutter_audio_query.dart';
import 'package:flutter_music_player/widget.dart';

class SongWidget extends StatelessWidget {
  final List<SongInfo> songList;

  SongWidget({@required this.songList});

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
        itemCount: songList.length,
        itemBuilder: (context, songIndex) {
          SongInfo song = songList[songIndex];
          if (song.displayName.contains(".mp3"))
            return Card(
              elevation: 5,
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Row(
                  children: <Widget>[
                    ClipRRect(
                      child: Image(
                        height: 90,
                        width: 150,
                        fit: BoxFit.cover,
                        image: FileImage(File(song.albumArtwork)),
                      ),
                      borderRadius: BorderRadius.circular(5),
                    ),
                    Container(
                      width: MediaQuery.of(context).size.width * 0.5,
                      padding: const EdgeInsets.all(8.0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: <Widget>[
                          Column(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: <Widget>[
                              Container(
                                width: MediaQuery.of(context).size.width * 0.4,
                                child: Text(song.title,
                                    style: TextStyle(
                                        fontSize: 13,
                                        fontWeight: FontWeight.w700)),
                              ),
                              Text("Release Year: ${song.year}",
                                  style: TextStyle(
                                      fontSize: 11,
                                      color: Colors.grey,
                                      fontWeight: FontWeight.w500)),
                              Text("Artist: ${song.artist}",
                                  style: TextStyle(
                                      fontSize: 11,
                                      color: Colors.grey,
                                      fontWeight: FontWeight.w500)),
                              Text("Composer: ${song.composer}",
                                  style: TextStyle(
                                      fontSize: 11,
                                      color: Colors.grey,
                                      fontWeight: FontWeight.w500)),
                              Text(
                                  "Duration: ${parseToMinutesSeconds(int.parse(song.duration))} min",
                                  style: TextStyle(
                                      fontSize: 11,
                                      color: Colors.grey,
                                      fontWeight: FontWeight.w500)),
                            ],
                          ),
                          InkWell(
                            onTap: () {
                              audioManagerInstance
                                  .start("file://${song.filePath}", song.title,
                                      desc: song.displayName,
                                      auto: true,
                                      cover: song.albumArtwork)
                                  .then((err) {
                                print(err);
                              });
                            },
                            child: IconText(
                              iconData: Icons.play_circle_outline,
                              iconColor: Colors.red,
                              string: "Play",
                              textColor: Colors.black,
                              iconSize: 25,
                            ),
                          )
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            );
          return SizedBox(
            height: 0,
          );
        });
  }

  static String parseToMinutesSeconds(int ms) {
    String data;
    Duration duration = Duration(milliseconds: ms);

    int minutes = duration.inMinutes;
    int seconds = (duration.inSeconds) - (minutes * 60);

    data = minutes.toString() + ":";
    if (seconds <= 9) data += "0";

    data += seconds.toString();
    return data;
  }
}
Widget bottomPanel() {
  return Column(children: <Widget>[
    Padding(
      padding: EdgeInsets.symmetric(horizontal: 16),
      child: songProgress(context),
    ),
    Container(
      padding: EdgeInsets.symmetric(vertical: 16),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: <Widget>[
          CircleAvatar(
            child: Center(
              child: IconButton(
                  icon: Icon(
                    Icons.skip_previous,
                    color: Colors.white,
                  ),
                  onPressed: () => audioManagerInstance.previous()),
            ),
            backgroundColor: Colors.cyan.withOpacity(0.3),
          ),
          CircleAvatar(
            radius: 30,
            child: Center(
              child: IconButton(
                onPressed: () async {
                  if(audioManagerInstance.isPlaying)
                    audioManagerInstance.toPause();
                  audioManagerInstance.playOrPause();
                },
                padding: const EdgeInsets.all(0.0),
                icon: Icon(
                  audioManagerInstance.isPlaying
                      ? Icons.pause
                      : Icons.play_arrow,
                  color: Colors.white,
                ),
              ),
            ),
          ),
          CircleAvatar(
            backgroundColor: Colors.cyan.withOpacity(0.3),
            child: Center(
              child: IconButton(
                  icon: Icon(
                    Icons.skip_next,
                    color: Colors.white,
                  ),
                  onPressed: () => audioManagerInstance.next()),
            ),
          ),
        ],
      ),
    ),
  ]);
}
Widget songProgress(BuildContext context) {
  var style = TextStyle(color: Colors.black);
  return Row(
    children: <Widget>[
      Text(
        _formatDuration(audioManagerInstance.position),
        style: style,
      ),
      Expanded(
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 5),
          child: SliderTheme(
              data: SliderTheme.of(context).copyWith(
                trackHeight: 2,
                thumbColor: Colors.blueAccent,
                overlayColor: Colors.blue,
                thumbShape: RoundSliderThumbShape(
                  disabledThumbRadius: 5,
                  enabledThumbRadius: 5,
                ),
                overlayShape: RoundSliderOverlayShape(
                  overlayRadius: 10,
                ),
                activeTrackColor: Colors.blueAccent,
                inactiveTrackColor: Colors.grey,
              ),
              child: Slider(
                value: _slider ?? 0,
                onChanged: (value) {
                  setState(() {
                    _slider = value;
                  });
                },
                onChangeEnd: (value) {
                  if (audioManagerInstance.duration != null) {
                    Duration msec = Duration(
                        milliseconds:
                        (audioManagerInstance.duration.inMilliseconds *
                            value)
                            .round());
                    audioManagerInstance.seekTo(msec);
                  }
                },
              )),
        ),
      ),
      Text(
        _formatDuration(audioManagerInstance.duration),
        style: style,
      ),
    ],
  );
}